---------------------
IMPORTING LIBRARIES
---------------------
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sea
import pandas as pd

-------------------
IMPORTING DATASET
-------------------
data = pd.read_csv("Loan_Data.csv")
data.head()

------------------------
UNDERSTANDING THE DATA
------------------------
data.columns
data.dtypes
data.shape
data.isnull().sum()
data.head(2)

data['Gender'].fillna(data['Gender'].mode()[0], inplace=True)
data['Married'].fillna(data['Married'].mode()[0], inplace=True)
data['Dependents'].fillna(data['Dependents'].mode()[0], inplace=True)
data['Self_Employed'].fillna(data['Self_Employed'].mode()[0],
inplace=True)
data['Credit_History'].fillna(data['Credit_History'].mode()[0],
inplace=True)
data['Loan_Amount_Term'].value_counts()

data['Loan_Amount_Term'].fillna(data['Loan_Amount_Term'].mode()[0],
inplace=True)
data['LoanAmount'].fillna(data['LoanAmount'].median(), inplace=True)

data.isnull().sum()
data.head(2)

--------------------
UNIVARIATE ANALYSIS
--------------------
data['Loan_Status'].value_counts()
data['Loan_Status'].value_counts(normalize=True)
data['Loan_Status'].value_counts().plot.bar()

plt.figure(1)
plt.subplot(221)
data['Gender'].value_counts(normalize=True).plot.bar(figsize=(20,10),
title= 'Gender')
plt.subplot(222)
data['Married'].value_counts(normalize=True).plot.bar(title=
'Married')
plt.subplot(223)
data['Self_Employed'].value_counts(normalize=True).plot.bar(title=
'Self_Employed')
plt.subplot(224)
data['Credit_History'].value_counts(normalize=True).plot.bar(title=
'Credit_History')
plt.show()

data['Gender'].value_counts()
data['Married'].value_counts()
data['Married'].value_counts()
data['Self_Employed'].value_counts()
data['Credit_History'].value_counts()

plt.figure(1)
plt.subplot(131)
data['Dependents'].value_counts(normalize=True).plot.bar(figsize=(24,6),
title= 'Dependents')
plt.subplot(132)
data['Education'].value_counts(normalize=True).plot.bar(title=
'Education')
plt.subplot(133)
data['Property_Area'].value_counts(normalize=True).plot.bar(title=
'Property_Area')
plt.show()

data['Dependents'].value_counts()
data['Education'].value_counts()
data['Property_Area'].value_counts()

plt.figure(1)
plt.subplot(121)
sea.histplot(data['ApplicantIncome']);
plt.subplot(122)
data['ApplicantIncome'].plot.box(figsize=(16,5))
plt.show()

data.boxplot(column='ApplicantIncome', by = 'Education')
plt.suptitle("")

plt.figure(1)
plt.subplot(121)
sea.histplot(data['CoapplicantIncome']);
plt.subplot(122)
data['CoapplicantIncome'].plot.box(figsize=(16,5))
plt.show()

plt.figure(1)
plt.subplot(121)
df=data.dropna()
sea.histplot(df['LoanAmount']);
plt.subplot(122)
df['LoanAmount'].plot.box(figsize=(16,5))
plt.show()

Gender=pd.crosstab(data['Gender'],data['Loan_Status'])
Gender.div(Gender.sum(1).astype(float), axis=0).plot(kind="bar",
stacked=True, figsize=(4,4))

Married=pd.crosstab(data['Married'],data['Loan_Status'])
Dependents=pd.crosstab(data['Dependents'],data['Loan_Status'])
Education=pd.crosstab(data['Education'],data['Loan_Status'])
Self_Employed=pd.crosstab(data['Self_Employed'],data['Loan_Status'])
Married.div(Married.sum(1).astype(float), axis=0).plot(kind="bar",
stacked=True, figsize=(4,4))
plt.show()
Dependents.div(Dependents.sum(1).astype(float),
axis=0).plot(kind="bar", stacked=True)
plt.show()
Education.div(Education.sum(1).astype(float), axis=0).plot(kind="bar",
stacked=True, figsize=(4,4))
plt.show()
Self_Employed.div(Self_Employed.sum(1).astype(float),
axis=0).plot(kind="bar", stacked=True, figsize=(4,4))
plt.show()

Credit_History=pd.crosstab(data['Credit_History'],data['Loan_Status'])
Property_Area=pd.crosstab(data['Property_Area'],data['Loan_Status'])
Credit_History.div(Credit_History.sum(1).astype(float),
axis=0).plot(kind="bar", stacked=True, figsize=(4,4))
plt.show()
Property_Area.div(Property_Area.sum(1).astype(float),
axis=0).plot(kind="bar", stacked=True)
plt.show()

data.groupby('Loan_Status')['ApplicantIncome'].mean().plot.bar()

bins=[0,2500,4000,6000,81000]
group=['Low','Average','High', 'Very high']
data['Income_bin']=pd.cut(data['ApplicantIncome'],bins,labels=group)
Income_bin=pd.crosstab(data['Income_bin'],data['Loan_Status'])
Income_bin.div(Income_bin.sum(1).astype(float),
axis=0).plot(kind="bar", stacked=True)
plt.xlabel('ApplicantIncome')
P = plt.ylabel('Percentage')

bins=[0,1000,3000,42000]
group=['Low','Average','High']
data['Coapplicant_Income_bin']=pd.cut(data['CoapplicantIncome'],
bins,labels=group)
Coapplicant_Income_bin=pd.crosstab(data['Coapplicant_Income_bin'],
data['Loan_Status'])
Coapplicant_Income_bin.div(Coapplicant_Income_bin.sum(1).
astype(float), axis=0).plot(kind="bar", stacked=True)
plt.xlabel('CoapplicantIncome')
P = plt.ylabel('Percentage')

data['Total_Income']=data['ApplicantIncome']+data['CoapplicantIncome']
bins=[0,2500,4000,6000,81000]
group=['Low','Average','High', 'Very high']
data['Total_Income_bin']=pd.cut(data['Total_Income'],bins,labels=group)
Total_Income_bin=pd.crosstab(data['Total_Income_bin'],data['Loan_Status'])
Total_Income_bin.div(Total_Income_bin.sum(1).astype(float),
axis=0).plot(kind="bar", stacked=True)
plt.xlabel('Total_Income')
P = plt.ylabel('Percentage')

bins=[0,100,200,700]
group=['Low','Average','High']
data['LoanAmount_bin']=pd.cut(data['LoanAmount'],bins,labels=group)
LoanAmount_bin=pd.crosstab(data['LoanAmount_bin'],data['Loan_Status'])
LoanAmount_bin.div(LoanAmount_bin.sum(1).astype(float),
axis=0).plot(kind="bar", stacked=True)
plt.xlabel('LoanAmount')
P = plt.ylabel('Percentage')

data=data.drop(['Income_bin', 'Coapplicant_Income_bin',
'LoanAmount_bin', 'Total_Income_bin', 'Total_Income'], axis=1)
data['Dependents'].replace('3+', 3,inplace=True)
data['Loan_Status'].replace('N', 0,inplace=True)
data['Loan_Status'].replace('Y', 1,inplace=True)
matrix = data.corr()
f, ax = plt.subplots(figsize=(9, 6))
sea.heatmap(matrix, vmax=.8, square=True, cmap="BuPu")

---------------------
FEATURE ENGINEERING
---------------------
data['LoanAmount_log'] = np.log(data['LoanAmount'])
data['LoanAmount_log'].hist(bins=20)

data['Total_Income']=data['ApplicantIncome']+data['CoapplicantIncome']
sea.histplot(data['Total_Income']);

data['Total_Income_log'] = np.log(data['Total_Income'])
sea.histplot(data['Total_Income_log']);

data['EMI']=data['LoanAmount']/data['Loan_Amount_Term']
sea.histplot(data['EMI']);

data['Balance Income']=data['Total_Income']-(data['EMI']*1000)
sea.histplot(data['Balance Income']);

data=data.drop(['ApplicantIncome', 'CoapplicantIncome',
'LoanAmount', 'Loan_Amount_Term'], axis=1)

data.head()

--------------------
BUILDING THE MODEL
--------------------
data=data.drop('Loan_ID',axis=1)

X = data.drop('Loan_Status',1)
y = data.Loan_Status

X=pd.get_dummies(X)
data=pd.get_dummies(data)

from sklearn import tree
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import accuracy_score
import graphviz
i=1
kf = StratifiedKFold(n_splits=5,random_state=3,shuffle=True)
accuracy_list = []
for train_index,test_index in kf.split(X,y):
 print('\n{} of kfold {}'.format(i,kf.n_splits))
 xtr,xvl = X.loc[train_index],X.loc[test_index]
 ytr,yvl = y[train_index],y[test_index]
 model = tree.DecisionTreeClassifier(random_state=1)
 model.fit(xtr, ytr)
 pred_test = model.predict(xvl)
 score = accuracy_score(yvl,pred_test)
 accuracy_list.append(score)
 print('accuracy_score',score)
 i+=1
 
 mean_accuracy = sum(accuracy_list)/ len(accuracy_list)
print(mean_accuracy)

data.info()

X.head()
y.head()

from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, y,
random_state=0)
clf = DecisionTreeClassifier(max_depth = 2, random_state = 0)
clf.fit(X_train, Y_train)
clf.predict(X_test)

-------------
MAIN OUTPUT
-------------
from sklearn import tree
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import accuracy_score
import graphviz
i=1
kf = StratifiedKFold(n_splits=5,random_state=3,shuffle=True)
accuracy_list = []
for train_index,test_index in kf.split(X,y):
 print('\n{} of kfold {}'.format(i,kf.n_splits))
 xtr,xvl = X.loc[train_index],X.loc[test_index]
 ytr,yvl = y[train_index],y[test_index]
 model = tree.DecisionTreeClassifier(random_state=1)
 model.fit(xtr, ytr)
 pred_test = model.predict(xvl)
 score = accuracy_score(yvl,pred_test)
 accuracy_list.append(score)
 print('accuracy_score',score)
 i+=1

mean_accuracy = sum(accuracy_list)/ len(accuracy_list)
print(mean_accuracy)

tree.plot_tree(clf);
